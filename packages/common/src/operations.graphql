query stocktake($stocktakeId: String!, $storeId: String!) {
  stocktake(id: $stocktakeId, storeId: $storeId) {
    __typename
    ... on StocktakeNode {
      __typename
      id
      stocktakeNumber
      comment
      createdDatetime
      # stocktakeDatetime
      status
      description
      # entryDatetime
      # enteredByName
      # onHold
      lines {
        __typename

        ... on StocktakeLineConnector {
          __typename
          nodes {
            __typename
            batch
            # itemCode
            # itemName
            itemId
            id
            expiryDate
            packSize
            snapshotNumberOfPacks
            countedNumberOfPacks
            sellPricePerPack
            costPricePerPack
          }
          totalCount
        }
      }
    }
  }
}

mutation upsertStocktakeLines(
  $storeId: String!
  $deleteStocktakeLines: [DeleteStocktakeLineInput!]
  $updateStocktakeLines: [UpdateStocktakeLineInput!]
  $insertStocktakeLines: [InsertStocktakeLineInput!]
) {
  batchStocktake(
    storeId: $storeId
    input: {
      deleteStocktakeLines: $deleteStocktakeLines
      updateStocktakeLines: $updateStocktakeLines
      insertStocktakeLines: $insertStocktakeLines
    }
  ) {
    __typename
    ... on BatchStocktakeResponses {
      __typename
      deleteStocktakeLines {
        id
      }
      insertStocktakeLines {
        id
      }
      updateStocktakeLines {
        id
      }
    }
  }
}

# query stocktakes($params: StocktakeListParameters) {
#   stocktakes(params: $params) {
#     __typename
#     ... on StocktakeConnector {
#       nodes {
#         id
#         comment
#         description
#         stocktakeDatetime
#         stocktakeNumber
#         status
#       }
#       totalCount
#     }
#   }
# }

mutation deleteStocktakes($storeId: String!, $ids: [DeleteStocktakeInput!]) {
  batchStocktake(storeId: $storeId, input: { deleteStocktakes: $ids }) {
    __typename
    ... on BatchStocktakeResponses {
      deleteStocktakes {
        __typename
        id
      }
    }
  }
}

mutation updateStocktake($input: UpdateStocktakeInput!) {
  updateStocktake(input: $input) {
    ... on StocktakeNode {
      __typename
      id
    }
  }
}

mutation insertStocktake($input: InsertStocktakeInput!) {
  insertStocktake(input: $input) {
    ... on StocktakeNode {
      __typename
      id
    }
  }
}

# query requisitions($params: RequisitionListParameters) {
#   requisitions(params: $params) {
#     __typename
#     ... on RequisitionConnector {
#       nodes {
#         id
#         comment
#         orderDate
#         theirReference
#         requisitionNumber
#         status
#         otherPartyName
#         otherPartyId
#         colour
#       }
#       totalCount
#     }

#     ... on ConnectorError {
#       __typename
#       error {
#         description
#         ... on DatabaseError {
#           __typename
#           description
#           fullError
#         }
#       }
#     }
#   }
# }

# mutation deleteSupplierRequisitions($ids: [DeleteSupplierRequisitionInput!]) {
#   batchSupplierRequisition(deleteSupplierRequisitions: $ids) {
#     __typename
#     deleteSupplierRequisitions {
#       __typename
#       id
#     }
#   }
# }

mutation updateSupplierRequisition(
  $storeId: String!
  $input: UpdateRequestRequisitionInput!
) {
  updateRequestRequisition(input: $input, storeId: $storeId) {
    ... on RequisitionNode {
      __typename
      id
    }
  }
}

mutation insertSupplierRequisition(
  $storeId: String!
  $input: InsertRequestRequisitionInput!
) {
  insertRequestRequisition(input: $input, storeId: $storeId) {
    ... on RequisitionNode {
      __typename
      id
    }
  }
}

# mutation deleteCustomerRequisitions($ids: [DeleteRequestRequisitionInput!]) {
#   batchRequestRequisition(deleteCustomerRequisitions: $ids) {
#     __typename
#     deleteRequestRequisitions {
#       __typename
#       id
#     }
#   }
# }

mutation updateCustomerRequisition(
  $storeId: String!
  $input: UpdateRequestRequisitionInput!
) {
  updateRequestRequisition(storeId: $storeId, input: $input) {
    ... on RequisitionNode {
      __typename
      id
    }
  }
}

mutation insertCustomerRequisition(
  $storeId: String!
  $input: InsertRequestRequisitionInput!
) {
  insertRequestRequisition(input: $input, storeId: $storeId) {
    ... on RequisitionNode {
      __typename
      id
    }
  }
}

query requisition($storeId: String!, $id: String!) {
  requisition(id: $id, storeId: $storeId) {
    __typename
    ... on RequisitionNode {
      __typename
      id
      # orderDate
      # requisitionDate
      comment
      theirReference
      type
      requisitionNumber
      # thresholdMOS
      # maxMOS
      status
      otherPartyId
      lines {
        __typename
        ... on RequisitionLineConnector {
          totalCount
          nodes {
            id
            # itemName
            # itemCode
            # itemUnit
            itemId
            # comment
            # monthlyConsumption
            # monthsOfSupply
            supplyQuantity
            # openingQuantity
            # issuedQuantity
            requestedQuantity
            # receivedQuantity
            # imprestQuantity
            # previousQuantity
            calculatedQuantity
            # previousStockOnHand
            # closingQuantity
            # stockAdditions
            # stockLosses
            # expiredQuantity
            # otherPartyClosingQuantity
          }
        }
      }
      otherParty {
        __typename
        ... on NameNode {
          id
          name
          code
          isCustomer
          isSupplier
        }
      }
    }
  }
}

# mutation upsertSupplierRequisition(
#   $deleteSupplierRequisitionLines: [DeleteSupplierRequisitionLineInput!]
#   $insertSupplierRequisitionLines: [InsertSupplierRequisitionLineInput!]
#   $updateSupplierRequisitionLines: [UpdateSupplierRequisitionLineInput!]
#   $updateSupplierRequisitions: [UpdateSupplierRequisitionInput!]
# ) {
#   batchSupplierRequisition(
#     deleteSupplierRequisitionLines: $deleteSupplierRequisitionLines
#     insertSupplierRequisitionLines: $insertSupplierRequisitionLines
#     updateSupplierRequisitionLines: $updateSupplierRequisitionLines
#     updateSupplierRequisitions: $updateSupplierRequisitions
#   ) {
#     __typename
#     updateSupplierRequisitions {
#       __typename
#       id
#     }

#     insertSupplierRequisitionLines {
#       __typename
#       id
#     }

#     deleteSupplierRequisitionLines {
#       __typename
#       id
#     }

#     updateSupplierRequisitionLines {
#       __typename
#       id
#     }
#   }
# }

# mutation upsertCustomerRequisition(
#   $deleteCustomerRequisitionLines: [DeleteCustomerRequisitionLineInput!]
#   $insertCustomerRequisitionLines: [InsertCustomerRequisitionLineInput!]
#   $updateCustomerRequisitionLines: [UpdateCustomerRequisitionLineInput!]
#   $updateCustomerRequisitions: [UpdateCustomerRequisitionInput!]
# ) {
#   batchCustomerRequisition(
#     deleteCustomerRequisitionLines: $deleteCustomerRequisitionLines
#     insertCustomerRequisitionLines: $insertCustomerRequisitionLines
#     updateCustomerRequisitionLines: $updateCustomerRequisitionLines
#     updateCustomerRequisitions: $updateCustomerRequisitions
#   ) {
#     __typename
#     updateCustomerRequisitions {
#       __typename
#       id
#     }

#     insertCustomerRequisitionLines {
#       __typename
#       id
#     }

#     deleteCustomerRequisitionLines {
#       __typename
#       id
#     }

#     updateCustomerRequisitionLines {
#       __typename
#       id
#     }
#   }
# }

query names(
  $key: NameSortFieldInput!
  $desc: Boolean
  $first: Int
  $offset: Int
  $filter: NameFilterInput
) {
  names(
    page: { first: $first, offset: $offset }
    sort: { key: $key, desc: $desc }
    filter: $filter
  ) {
    ... on ConnectorError {
      __typename
      error {
        ... on DatabaseError {
          __typename
          description
          fullError
        }
        description
        ... on PaginationError {
          __typename
          description
          rangeError {
            description
            field
            max
            min
          }
        }
      }
    }
    ... on NameConnector {
      __typename
      nodes {
        code
        id
        isCustomer
        isSupplier
        name
        store {
          id
          code
        }
      }
      totalCount
    }
  }
}

query itemsWithStockLines(
  $first: Int
  $offset: Int
  $key: ItemSortFieldInput!
  $desc: Boolean
  $filter: ItemFilterInput
  $storeId: String!
) {
  items(
    page: { first: $first, offset: $offset }
    sort: { key: $key, desc: $desc }
    filter: $filter
  ) {
    ... on ConnectorError {
      __typename
      error {
        description
        ... on DatabaseError {
          __typename
          description
          fullError
        }
        ... on PaginationError {
          __typename
          description
          rangeError {
            description
            field
            max
            min
          }
        }
      }
    }
    ... on ItemConnector {
      __typename
      nodes {
        __typename
        # availableQuantity

        availableBatches(storeId: $storeId) {
          __typename
          ... on ConnectorError {
            __typename
            error {
              description
              ... on DatabaseError {
                __typename
                description
                fullError
              }
              ... on PaginationError {
                __typename
                description
                rangeError {
                  description
                  field
                  max
                  min
                }
              }
            }
          }
          ... on StockLineConnector {
            __typename
            nodes {
              __typename
              availableNumberOfPacks
              batch
              costPricePerPack
              expiryDate
              id
              itemId
              packSize
              sellPricePerPack
              totalNumberOfPacks
              onHold
              note
              storeId
              locationName
            }
            totalCount
          }
        }
        code
        id
        isVisible
        name
        unitName
      }
      totalCount
    }
  }
}

query itemsListView(
  $first: Int
  $offset: Int
  $key: ItemSortFieldInput!
  $desc: Boolean
  $filter: ItemFilterInput
) {
  items(
    page: { first: $first, offset: $offset }
    sort: { key: $key, desc: $desc }
    filter: $filter
  ) {
    ... on ConnectorError {
      __typename
      error {
        description
        ... on DatabaseError {
          __typename
          description
          fullError
        }
        ... on PaginationError {
          __typename
          description
          rangeError {
            description
            field
            max
            min
          }
        }
      }
    }
    ... on ItemConnector {
      __typename
      nodes {
        __typename
        # availableQuantity
        code
        id
        isVisible
        name
        unitName
      }
      totalCount
    }
  }
}

query stockCounts($daysTillExpired: Int, $timezoneOffset: Int) {
  stockCounts(
    daysTillExpired: $daysTillExpired
    timezoneOffset: $timezoneOffset
  ) {
    expired
    expiringSoon
  }
}

query locations($sort: [LocationSortInput!]) {
  locations(sort: $sort) {
    __typename
    ... on LocationConnector {
      __typename
      nodes {
        __typename
        id
        name
        onHold
        code
      }
      totalCount
    }
    ... on ConnectorError {
      __typename
      error {
        description
        ... on DatabaseError {
          __typename
          description
          fullError
        }
        ... on PaginationError {
          __typename
          description
          rangeError {
            description
            field
            max
            min
          }
        }
      }
    }
  }
}

mutation insertLocation($input: InsertLocationInput!) {
  insertLocation(input: $input) {
    ... on InsertLocationError {
      __typename
      error {
        description
        ... on InternalError {
          __typename
          description
          fullError
        }
        ... on DatabaseError {
          __typename
          description
          fullError
        }
        ... on RecordAlreadyExist {
          __typename
          description
        }
        ... on UniqueValueViolation {
          __typename
          description
          field
        }
      }
    }
    ... on LocationNode {
      id
      name
      code
      onHold
    }
  }
}

mutation updateLocation($input: UpdateLocationInput!) {
  updateLocation(input: $input) {
    ... on UpdateLocationError {
      __typename
      error {
        description
        ... on InternalError {
          __typename
          description
          fullError
        }
        ... on DatabaseError {
          __typename
          description
          fullError
        }
        ... on RecordBelongsToAnotherStore {
          __typename
          description
        }
        ... on RecordNotFound {
          __typename
          description
        }
        ... on UniqueValueViolation {
          __typename
          description
          field
        }
      }
    }
    ... on LocationNode {
      id
      name
      onHold
      code
    }
  }
}

query stores($first: Int, $offset: Int, $filter: StoreFilterInput) {
  stores(page: { first: $first, offset: $offset }, filter: $filter) {
    ... on StoreConnector {
      __typename
      nodes {
        code
        id
      }
      totalCount
    }
  }
}

query authToken($username: String!, $password: String!) {
  authToken(password: $password, username: $username) {
    ... on AuthToken {
      __typename
      token
    }
    ... on AuthTokenError {
      __typename
      error {
        ... on UserNameDoesNotExist {
          __typename
          description
        }
        ... on InvalidCredentials {
          __typename
          description
        }
        ... on DatabaseError {
          __typename
          description
          fullError
        }
        ... on InternalError {
          __typename
          description
          fullError
        }
        description
      }
    }
  }
}

query masterLists(
  $first: Int
  $offset: Int
  $key: MasterListSortFieldInput!
  $desc: Boolean
  $filter: MasterListFilterInput
) {
  masterLists(
    filter: $filter
    page: { first: $first, offset: $offset }
    sort: { key: $key, desc: $desc }
  ) {
    ... on MasterListConnector {
      __typename
      nodes {
        name
        code
        lines {
          nodes {
            id
            itemId
            item {
              code
              id
              unitName
              name
              isVisible
              availableBatches {
                ... on ConnectorError {
                  __typename
                  error {
                    ... on PaginationError {
                      __typename
                      description
                      rangeError {
                        description
                        min
                        max
                        field
                      }
                    }
                    ... on DatabaseError {
                      __typename
                      description
                      fullError
                    }
                    description
                  }
                }
                ... on StockLineConnector {
                  __typename
                  nodes {
                    __typename
                    availableNumberOfPacks
                    batch
                    costPricePerPack
                    expiryDate
                    itemId
                    id
                    totalNumberOfPacks
                    storeId
                    sellPricePerPack
                    packSize
                    onHold
                    note
                    locationName
                  }
                  totalCount
                }
              }
            }
          }
          totalCount
        }
        code
        description
        id
      }
      totalCount
    }
    ... on ConnectorError {
      __typename
      error {
        description
        ... on DatabaseError {
          __typename
          description
          fullError
        }
        ... on PaginationError {
          __typename
          description
          rangeError {
            field
            min
            max
            description
          }
        }
      }
    }
  }
}
