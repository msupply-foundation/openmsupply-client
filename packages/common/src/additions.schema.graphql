type Mutations {
  batchStocktake(
    insertStocktakes: [InsertStocktakeInput!]
    updateStocktakes: [UpdateStocktakeInput!]
    deleteStocktakes: [DeleteStocktakeInput!]
    insertStocktakeLines: [InsertStocktakeLineInput!]
    updateStocktakeLines: [UpdateStocktakeLineInput!]
    deleteStocktakeLines: [DeleteStocktakeLineInput!]
  ): BatchStocktakeResponse!
  updateSupplierRequisition(
    input: UpdateSupplierRequisitionInput!
  ): UpdateSupplierRequisitionResponse!
  insertSupplierRequisition(
    input: InsertSupplierRequisitionInput!
  ): InsertSupplierRequisitionResponse!
  deleteSupplierRequisition(
    input: DeleteSupplierRequisitionInput!
  ): DeleteSupplierRequisitionResponse!
  updateSupplierRequisitionLine(
    input: UpdateSupplierRequisitionLineInput!
  ): UpdateSupplierRequisitionLineResponse!
  insertSupplierRequisitionLine(
    input: InsertSupplierRequisitionLineInput!
  ): InsertSupplierRequisitionLineResponse!
  deleteSupplierRequisitionLine(
    input: DeleteSupplierRequisitionLineInput!
  ): DeleteSupplierRequisitionLineResponse!
  batchSupplierRequisition(
    insertSupplierRequisitions: [InsertSupplierRequisitionInput!]
    updateSupplierRequisitions: [UpdateSupplierRequisitionInput!]
    deleteSupplierRequisitions: [DeleteSupplierRequisitionInput!]
    insertSupplierRequisitionLines: [InsertSupplierRequisitionLineInput!]
    updateSupplierRequisitionLines: [UpdateSupplierRequisitionLineInput!]
    deleteSupplierRequisitionLines: [DeleteSupplierRequisitionLineInput!]
  ): BatchSupplierRequisitionResponse!

  updateCustomerRequisition(
    input: UpdateCustomerRequisitionInput!
  ): UpdateCustomerRequisitionResponse!
  insertCustomerRequisition(
    input: InsertCustomerRequisitionInput!
  ): InsertCustomerRequisitionResponse!
  deleteCustomerRequisition(
    input: DeleteCustomerRequisitionInput!
  ): DeleteCustomerRequisitionResponse!
  updateCustomerRequisitionLine(
    input: UpdateCustomerRequisitionLineInput!
  ): UpdateCustomerRequisitionLineResponse!
  insertCustomerRequisitionLine(
    input: InsertCustomerRequisitionLineInput!
  ): InsertCustomerRequisitionLineResponse!
  deleteCustomerRequisitionLine(
    input: DeleteCustomerRequisitionLineInput!
  ): DeleteCustomerRequisitionLineResponse!
  batchCustomerRequisition(
    insertCustomerRequisitions: [InsertCustomerRequisitionInput!]
    updateCustomerRequisitions: [UpdateCustomerRequisitionInput!]
    deleteCustomerRequisitions: [DeleteCustomerRequisitionInput!]
    insertCustomerRequisitionLines: [InsertCustomerRequisitionLineInput!]
    updateCustomerRequisitionLines: [UpdateCustomerRequisitionLineInput!]
    deleteCustomerRequisitionLines: [DeleteCustomerRequisitionLineInput!]
  ): BatchCustomerRequisitionResponse!

  updateStocktake(input: UpdateStocktakeInput!): UpdateStocktakeResponse!
  insertStocktake(input: InsertStocktakeInput!): InsertStocktakeResponse!
  deleteStocktake(input: DeleteStocktakeInput!): DeleteStocktakeResponse!
}

type Queries {
  requisition(
    # id of the invoice
    id: String!
  ): RequisitionResponse!

  requisitions(params: RequisitionListParameters): RequisitionsResponse!

  stocktake(
    # id of the invoice
    id: String!
  ): StocktakeResponse!

  stocktakes(params: StocktakeListParameters): StocktakesResponse!
}

### Stocktake
input StocktakeListParameters {
  page: PaginationInput
  filter: StocktakeFilterInput
  sort: [StocktakeSortInput!]
}

input StocktakeFilterInput {
  description: SimpleStringFilterInput
}

enum StocktakeSortFieldInput {
  description
}

input StocktakeSortInput {
  # Sort query result by `key`
  key: StocktakeSortFieldInput!

  # Sort query result is sorted descending or ascending (if not provided the default is
  # ascending)
  desc: Boolean
}

type StocktakeNode {
  id: String!
  stocktakeNumber: Int!
  stocktakeDatetime: String
  comment: String
  description: String
  status: StocktakeNodeStatus!
  lines: StocktakeLinesResponse!
  entryDatetime: DateTime!
  enteredByName: String!
  onHold: Boolean!
}

type StocktakeLineNode {
  id: String!
  itemId: String!
  itemName: String!
  itemCode: String!
  batch: String
  expiryDate: NaiveDate
  packSize: Int
  stockLineId: String
  snapshotNumberOfPacks: Int
  countedNumberOfPacks: Int
  sellPricePerPack: Float
  costPricePerPack: Float
}

input UpdateStocktakeLineInput {
  id: String!
  batch: String
  expiryDate: NaiveDate
  countedNumPacks: Int
  sellPricePerPack: Float
  costPricePerPack: Float
}

union UpdateStocktakeLineResponse = NodeError | StocktakeLineNode
type UpdateStocktakeLineResponseWithId {
  id: String!
  response: UpdateStocktakeLineResponse
}

input InsertStocktakeLineInput {
  id: String!
  batch: String
  expiryDate: NaiveDate
  countedNumPacks: Int
  sellPricePerPack: Float
  costPricePerPack: Float
  stocktakeId: String!
  itemId: String!
}
union InsertStocktakeLineResponse = NodeError | StocktakeLineNode
type InsertStocktakeLineResponseWithId {
  id: String!
  response: InsertStocktakeLineResponse
}

input DeleteStocktakeLineInput {
  id: String!
}
union DeleteStocktakeLineResponse = NodeError | DeleteResponse
type DeleteStocktakeLineResponseWithId {
  id: String!
  response: DeleteResponse
}

enum StocktakeNodeStatus {
  SUGGESTED
  FINALISED
}

union StocktakeLinesResponse = ConnectorError | StocktakeLineConnector

type StocktakeLineConnector {
  totalCount: Int!
  nodes: [StocktakeLineNode!]
}

union StocktakeResponse = StocktakeNode | NodeError
union StocktakesResponse = StocktakeConnector | NodeError
type StocktakeConnector {
  totalCount: Int!
  nodes: [StocktakeNode!]!
}

input UpdateStocktakeInput {
  id: String!
  stocktakeDatetime: String
  comment: String
  description: String
  status: StocktakeNodeStatus
  onHold: Boolean
}
union UpdateStocktakeResponse = NodeError | StocktakeNode
type UpdateStocktakeResponseWithId {
  id: String!
  response: UpdateStocktakeResponse
}

union InsertStocktakeResponse = NodeError | StocktakeNode
type InsertStocktakeResponseWithId {
  id: String!
  response: InsertStocktakeResponse
}

union DeleteStocktakeResponse = NodeError | DeleteResponse
type DeleteStocktakeResponseWithId {
  id: String!
  response: DeleteResponse
}

input InsertStocktakeInput {
  id: String!
  stocktakeDatetime: String
  comment: String
  description: String
}

input DeleteStocktakeInput {
  id: String!
}

input BatchStocktakeInput {
  insertStocktakes: [InsertStocktakeInput!]
  updateStocktakes: [UpdateStocktakeInput!]
  deleteStocktakes: [DeleteStocktakeInput!]
  insertStocktakeLines: [InsertStocktakeLineInput!]
  updateStocktakeLines: [UpdateStocktakeLineInput!]
  deleteStocktakeLines: [DeleteStocktakeLineInput!]
}

type BatchStocktakeResponse {
  insertStocktakeLines: [InsertStocktakeLineResponseWithId!]
  updateStocktakeLines: [UpdateStocktakeLineResponseWithId!]
  deleteStocktakeLines: [DeleteStocktakeLineResponseWithId!]
  insertStocktakes: [InsertStocktakeResponseWithId!]
  updateStocktakes: [UpdateStocktakeResponseWithId!]
  deleteStocktakes: [DeleteStocktakeResponseWithId!]
}

### Requisitions

type RequisitionLineNode {
  id: String!
  itemId: String!
  itemName: String
  itemCode: String
  itemUnit: String

  comment: String

  monthlyConsumption: Float
  monthsOfSupply: Float

  supplyQuantity: Float
  openingQuantity: Float
  issuedQuantity: Float
  requestedQuantity: Float
  receivedQuantity: Float
  imprestQuantity: Float
  previousQuantity: Float
  calculatedQuantity: Float

  previousStockOnHand: Float
  closingQuantity: Float

  stockAdditions: Float
  stockLosses: Float
  expiredQuantity: Float

  otherPartyClosingQuantity: Float
}

union RequisitionLinesResponse = ConnectorError | RequisitionLineConnector

type RequisitionLineConnector {
  totalCount: Int!
  nodes: [RequisitionLineNode!]!
}

enum SupplierRequisitionNodeStatus {
  DRAFT
  SENT
  IN_PROGRESS
  FINALISED
}

enum CustomerRequisitionNodeStatus {
  NEW
  IN_PROGRESS
  FINALISED
}

union RequisitionResponse = RequisitionNode | NodeError

union RequisitionLineResponse = RequisitionNode | NodeError

enum RequisitionNodeType {
  CUSTOMER_REQUISITION
  SUPPLIER_REQUISITION
}

union RequisitionsResponse = ConnectorError | RequisitionConnector

type RequisitionConnector {
  totalCount: Int!
  nodes: [RequisitionNode!]!
}

input UpdateSupplierRequisitionInput {
  id: String!
  orderDate: String
  otherPartyId: String
  comment: String
  theirReference: String
  color: String
  status: SupplierRequisitionNodeStatus
}

input UpdateSupplierRequisitionLineInput {
  id: String!
  itemName: String
  itemCode: String
  itemUnit: String
  comment: String
  monthlyConsumption: Float
  monthsOfSupply: Float
  supplyQuantity: Float
  openingQuantity: Float
  issuedQuantity: Float
  requestedQuantity: Float
  receivedQuantity: Float
  imprestQuantity: Float
  previousQuantity: Float
  calculatedQuantity: Float

  previousStockOnHand: Float
  closingQuantity: Int

  stockAdditions: Float
  stockLosses: Float
  expiredQuantity: Float

  otherPartyClosingQuantity: Int
}

input UpdateCustomerRequisitionLineInput {
  id: String!
  itemName: String
  itemCode: String
  itemUnit: String

  comment: String

  monthlyConsumption: Float
  monthsOfSupply: Float

  supplyQuantity: Float
  openingQuantity: Float
  issuedQuantity: Float
  requestedQuantity: Float
  receivedQuantity: Float
  imprestQuantity: Float
  previousQuantity: Float
  calculatedQuantity: Float

  previousStockOnHand: Float
  closingQuantity: Int

  stockAdditions: Float
  stockLosses: Float
  expiredQuantity: Float

  otherPartyClosingQuantity: Int
}

input InsertSupplierRequisitionInput {
  id: String!
  orderDate: String
  otherPartyId: String!
  comment: String
  theirReference: String
  type: RequisitionNodeType
}

input InsertSupplierRequisitionLineInput {
  id: String!
  itemId: String!
  requisitionId: String!
  itemName: String
  itemCode: String
  itemUnit: String

  comment: String

  monthlyConsumption: Float
  monthsOfSupply: Float

  supplyQuantity: Float
  openingQuantity: Float
  issuedQuantity: Float
  requestedQuantity: Float
  receivedQuantity: Float
  imprestQuantity: Float
  previousQuantity: Float
  calculatedQuantity: Float

  previousStockOnHand: Float
  closingQuantity: Int

  stockAdditions: Float
  stockLosses: Float
  expiredQuantity: Float

  otherPartyClosingQuantity: Int
}

input InsertCustomerRequisitionLineInput {
  id: String!
  itemId: String!
  requisitionId: String!
  itemName: String
  itemCode: String
  itemUnit: String

  comment: String

  monthlyConsumption: Float
  monthsOfSupply: Float

  supplyQuantity: Float
  openingQuantity: Float
  issuedQuantity: Float
  requestedQuantity: Float
  receivedQuantity: Float
  imprestQuantity: Float
  previousQuantity: Float
  calculatedQuantity: Float

  previousStockOnHand: Float
  closingQuantity: Int

  stockAdditions: Float
  stockLosses: Float
  expiredQuantity: Float

  otherPartyClosingQuantity: Int
}

input DeleteSupplierRequisitionInput {
  id: String!
}

input DeleteSupplierRequisitionLineInput {
  id: String!
}

input DeleteCustomerRequisitionLineInput {
  id: String!
}

union UpdateSupplierRequisitionResponse = NodeError | RequisitionNode
type UpdateSupplierRequisitionResponseWithId {
  id: String!
  response: UpdateSupplierRequisitionResponse
}

union UpdateSupplierRequisitionLineResponse = NodeError | RequisitionLineNode
type UpdateSupplierRequisitionLineResponseWithId {
  id: String!
  response: UpdateSupplierRequisitionLineResponse
}

union UpdateCustomerRequisitionLineResponse = NodeError | RequisitionLineNode
type UpdateCustomerRequisitionLineResponseWithId {
  id: String!
  response: UpdateCustomerRequisitionLineResponse
}

union InsertSupplierRequisitionResponse = NodeError | RequisitionNode
type InsertSupplierRequisitionResponseWithId {
  id: String!
  response: InsertSupplierRequisitionResponse
}

union InsertSupplierRequisitionLineResponse = NodeError | RequisitionLineNode
type InsertSupplierRequisitionLineResponseWithId {
  id: String!
  response: InsertSupplierRequisitionLineResponse
}

union InsertCustomerRequisitionLineResponse = NodeError | RequisitionLineNode
type InsertCustomerRequisitionLineResponseWithId {
  id: String!
  response: InsertCustomerRequisitionLineResponse
}

union DeleteSupplierRequisitionResponse = NodeError | DeleteResponse
type DeleteSupplierRequisitionResponseWithId {
  id: String!
  response: DeleteSupplierRequisitionResponse
}

union DeleteSupplierRequisitionLineResponse = NodeError | DeleteResponse
type DeleteSupplierRequisitionLineResponseWithId {
  id: String!
  response: DeleteSupplierRequisitionLineResponse
}

union DeleteCustomerRequisitionLineResponse = NodeError | DeleteResponse
type DeleteCustomerRequisitionLineResponseWithId {
  id: String!
  response: DeleteCustomerRequisitionLineResponse
}

input UpdateCustomerRequisitionInput {
  id: String!
  orderDate: String
  requisitionDate: String
  otherPartyId: String
  comment: String
  theirReference: String
  color: String
  status: SupplierRequisitionNodeStatus
}

input InsertCustomerRequisitionInput {
  id: String!
  orderDate: String
  otherPartyId: String!
  comment: String
  theirReference: String
  type: RequisitionNodeType
}

input DeleteCustomerRequisitionInput {
  id: String!
}

union UpdateCustomerRequisitionResponse = NodeError | RequisitionNode
type UpdateCustomerRequisitionResponseWithId {
  id: String!
  response: UpdateCustomerRequisitionResponse
}

union InsertCustomerRequisitionResponse = NodeError | RequisitionNode
type InsertCustomerRequisitionResponseWithId {
  id: String!
  response: InsertCustomerRequisitionResponse
}

union DeleteCustomerRequisitionResponse = NodeError | DeleteResponse
type DeleteCustomerRequisitionResponseWithId {
  id: String!
  response: DeleteCustomerRequisitionResponse
}

input BatchSupplierRequisitionInput {
  insertSupplierRequisitions: [InsertSupplierRequisitionInput!]
  updateSupplierRequisitions: [UpdateSupplierRequisitionInput!]
  deleteSupplierRequisitions: [DeleteSupplierRequisitionInput!]
  insertSupplierRequisitionLines: [InsertSupplierRequisitionLineInput!]
  updateSupplierRequisitionLines: [UpdateSupplierRequisitionLineInput!]
  deleteSupplierRequisitionLines: [DeleteSupplierRequisitionLineInput!]
}

input BatchCustomerRequisitionInput {
  insertCustomerRequisitions: [InsertCustomerRequisitionInput!]
  updateCustomerRequisitions: [UpdateCustomerRequisitionInput!]
  deleteCustomerRequisitions: [DeleteCustomerRequisitionInput!]
  insertCustomerRequisitionLines: [InsertCustomerRequisitionLineInput!]
  updateCustomerRequisitionLines: [UpdateCustomerRequisitionLineInput!]
  deleteCustomerRequisitionLines: [DeleteCustomerRequisitionLineInput!]
}

type BatchCustomerRequisitionResponse {
  insertCustomerRequisitionLines: [InsertCustomerRequisitionLineResponseWithId!]
  updateCustomerRequisitionLines: [UpdateCustomerRequisitionLineResponseWithId!]
  deleteCustomerRequisitionLines: [DeleteCustomerRequisitionLineResponseWithId!]
  insertCustomerRequisitions: [InsertCustomerRequisitionResponseWithId!]
  updateCustomerRequisitions: [UpdateCustomerRequisitionResponseWithId!]
  deleteCustomerRequisitions: [DeleteCustomerRequisitionResponseWithId!]
}

type BatchSupplierRequisitionResponse {
  insertSupplierRequisitionLines: [InsertSupplierRequisitionLineResponseWithId!]
  updateSupplierRequisitionLines: [UpdateSupplierRequisitionLineResponseWithId!]
  deleteSupplierRequisitionLines: [DeleteSupplierRequisitionLineResponseWithId!]
  insertSupplierRequisitions: [InsertSupplierRequisitionResponseWithId!]
  updateSupplierRequisitions: [UpdateSupplierRequisitionResponseWithId!]
  deleteSupplierRequisitions: [DeleteSupplierRequisitionResponseWithId!]
}

input RequisitionListParameters {
  page: PaginationInput
  filter: RequisitionFilterInput
  sort: [RequisitionSortInput!]
}

input RequisitionFilterInput {
  type: SimpleStringFilterInput
  comment: SimpleStringFilterInput
}

enum RequisitionSortFieldInput {
  otherPartyName
}

input RequisitionSortInput {
  key: RequisitionSortFieldInput!
  desc: Boolean
}

type RequisitionNode {
  id: String!
  orderDate: DateTime
  requisitionDate: DateTime
  comment: String
  theirReference: String
  type: RequisitionNodeType
  requisitionNumber: Int!
  thresholdMOS: Int
  maxMOS: Int
  status: SupplierRequisitionNodeStatus!
  lines: RequisitionLinesResponse!
  color: String
  otherParty: NameResponse!
  otherPartyId: String!
  otherPartyName: String!
}

input BatchOutboundShipmentInput {
  insertOutboundShipments: [InsertOutboundShipmentInput!]
  insertOutboundShipmentLines: [InsertOutboundShipmentLineInput!]
  updateOutboundShipmentLines: [UpdateOutboundShipmentLineInput!]
  deleteOutboundShipmentLines: [DeleteOutboundShipmentLineInput!]
  updateOutboundShipments: [UpdateOutboundShipmentInput!]
  deleteOutboundShipments: [String!]
}

input BatchInboundShipmentInput {
  insertOutboundShipments: [InsertInboundShipmentInput!]
  insertInboundShipmentLines: [InsertInboundShipmentLineInput!]
  updateInboundShipmentLines: [UpdateInboundShipmentLineInput!]
  deleteInboundShipmentLines: [DeleteInboundShipmentLineInput!]
  updateInboundShipments: [UpdateInboundShipmentInput!]
  deleteInboundShipments: [DeleteInboundShipmentInput!]
}
